name: CI/CD Pipeline for Flask Backend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        id: install_dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8 black
        continue-on-error: true

      - name: Lint with flake8
        id: lint_flake8
        run: |
          flake8 . --max-line-length=120 > lint_output.txt
          cat lint_output.txt
        continue-on-error: true

      - name: Format code with black
        id: format_black
        run: |
          black . --check
        continue-on-error: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        id: build_docker
        run: docker build -t flask-backend:$GITHUB_SHA .
        continue-on-error: true

      - name: Run Flask application in Docker
        id: run_flask
        run: |
          docker compose -f docker-compose.yml up -d
          sleep 5  # Attendre que l'application démarre
          curl http://localhost:5000/api
        continue-on-error: true

      - name: Run Backend unit tests
        id: run_tests
        run: |
          sleep 10  # Attendre que l'application soit pleinement lancée
          docker compose -f docker-compose.yml exec web pytest --maxfail=1 --disable-warnings -v > test_output.txt
          cat test_output.txt
        continue-on-error: true

      - name: Push Docker image to DockerHub
        if: github.ref == 'refs/heads/main'
        id: push_docker
        run: |
          docker tag flask-backend:$GITHUB_SHA ${{ secrets.DOCKER_USERNAME }}/flask-backend:$GITHUB_SHA
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-backend:$GITHUB_SHA
        continue-on-error: true

      - name: Deploy to Render using Deploy Hook
        id: deploy_render
        run: |
          curl -X POST "https://api.render.com/deploy/srv-csone2aj1k6c73ako43g?key=${{ secrets.RENDER_DEPLOY_KEY }}"
        continue-on-error: true

      - name: Gather status for Discord Notification
        id: gather_status
        run: |
          STATUS="✅ CI/CD Pipeline completed for Flask Backend\n\n"
          STATUS+="Install dependencies: ${{ steps.install_dependencies.outcome }}\n"
          STATUS+="Run unit tests: ${{ steps.run_tests.outcome }}\n"
          STATUS+="Lint with flake8: ${{ steps.lint_flake8.outcome }}\n"
          STATUS+="Format code with black: ${{ steps.format_black.outcome }}\n"
          STATUS+="Build Docker image: ${{ steps.build_docker.outcome }}\n"
          STATUS+="Run Flask application in Docker: ${{ steps.run_flask.outcome }}\n"
          STATUS+="Push Docker image to DockerHub: ${{ steps.push_docker.outcome }}\n"
          STATUS+="Deploy to Render: ${{ steps.deploy_render.outcome }}\n"
          echo "$STATUS" > status.txt

      - name: Send Discord Notification
        run: |
          payload=$(jq -n --arg content "$(cat status.txt)" '{content: $content}')
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$payload" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}